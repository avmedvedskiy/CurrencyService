using System;
using System.IO;
using System.Linq;
using UnityEditor;
using UnityEngine;
using Object = UnityEngine.Object;

namespace Currency.Editor
{
    public static class CurrencyEnumGenerator
    {
        [UnityEditor.Callbacks.DidReloadScripts]
        private static void Generate()
        {
            var asset = FindAsset<CurrencyStorage>();
            if (asset == null)
                return;
            
            string folder = $"{Application.dataPath}/{asset.codeGenFolderPath}";
            string path = $"{folder}/{asset.codeGenEnumName}.cs";
            
            var enums = asset.currencylist
                .Where(value => value.id != 0)
                .Select(value => $"{Replace(value.name)} = {value.id},");

            string enumCode =
                $@"//This code is autogenerated from {asset}
                    namespace Currency{{
                    public enum CurrencyEnum {{
                    {
                        $"{string.Join("\r\n", enums)}"
                    }
                }}
                {GetExtensionMethodCode()}
            }}";
            enumCode = enumCode.Replace("CurrencyEnum", asset.codeGenEnumName);

            Directory.CreateDirectory(folder);
            File.WriteAllText(path, enumCode);
        }

        private static string GetExtensionMethodCode()
        {
            return $@"
            public static class CurrencyServiceExtension
            {{
            public static int GetCurrency(this CurrencyService service, CurrencyEnum id)
            {{
                return service.GetCurrency((int)id);
            }}

            public static void AddCurrency(this CurrencyService service,CurrencyEnum id, int count)
            {{
                service.AddCurrency((int)id,count);
            }}

            public static void RemoveCurrency(this CurrencyService service,CurrencyEnum id, int count)
            {{
                service.RemoveCurrency((int)id,count);
            }}

            public static bool HasCurrency(this CurrencyService service,CurrencyEnum id)
            {{
                return service.HasCurrency((int)id);
            }}
            }} 
            ";
        }

        private static string Replace(string str)
        {
            return str
                .Replace(" ", "")
                .Replace("/", "");
        }

        private static T FindAsset<T>() where T: Object
        {
            var assets = AssetDatabase.FindAssets($"t:{typeof(T).Name}");

            if (assets.Length != 0)
                return AssetDatabase.LoadAssetAtPath<T>(AssetDatabase.GUIDToAssetPath(assets[0]));
            
            return null;
        }
    }
}